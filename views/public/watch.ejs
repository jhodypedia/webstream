<section class="watch-wrap">
  <div class="video-wrapper">
    <div class="video-inner">
      <video id="player" preload="metadata" playsinline></video>

      <!-- Overlay Play Button -->
      <div class="overlay" id="overlay">
        <button id="playPauseBtn" class="play-btn">
          <i class="fa-solid fa-play"></i>
        </button>
      </div>

      <!-- Watermark -->
      <div class="wm">PansaStream</div>

      <!-- Custom Controls -->
      <div class="controls" id="controls">
        <div class="progress-bar" id="progressBar">
          <div id="progress"></div>
        </div>

        <div class="buttons">
          <button id="playPauseCtrl" class="ctrl-btn"><i class="fa-solid fa-play"></i></button>
          <button id="muteBtn" class="ctrl-btn"><i class="fa-solid fa-volume-high"></i></button>
          <input id="volume" type="range" min="0" max="1" step="0.05" value="1">
          <button id="fullscreenBtn" class="ctrl-btn"><i class="fa-solid fa-expand"></i></button>
        </div>
      </div>
    </div>

    <div class="meta">
      <h1 class="title"><%= video.title %></h1>
      <div class="stats">
        <i class="fa-solid fa-eye"></i> <span id="views"><%= video.views %></span> views
        <span>â€¢</span>
        <span><%= new Date(video.createdAt).toLocaleDateString('id-ID') %></span>
      </div>
      <% if (video.description) { %>
        <p class="desc"><%= video.description %></p>
      <% } %>
    </div>
  </div>
</section>

<script src="https://cdn.jsdelivr.net/npm/hls.js@latest"></script>
<script src="https://kit.fontawesome.com/a2d9b09d5b.js" crossorigin="anonymous"></script>
<script>
(function(){
  const video = document.getElementById('player');
  const overlay = document.getElementById('overlay');
  const playPauseBtn = document.getElementById('playPauseBtn');
  const playPauseCtrl = document.getElementById('playPauseCtrl');
  const volumeSlider = document.getElementById('volume');
  const muteBtn = document.getElementById('muteBtn');
  const fullscreenBtn = document.getElementById('fullscreenBtn');
  const progress = document.getElementById('progress');
  const progressBar = document.getElementById('progressBar');
  const controls = document.getElementById('controls');

  const src = '<%= video.hls_master_url %>';
  if (Hls.isSupported()) {
    const hls = new Hls();
    hls.loadSource(src);
    hls.attachMedia(video);
  } else if (video.canPlayType('application/vnd.apple.mpegurl')) {
    video.src = src;
  }

  const togglePlay = () => video.paused ? video.play() : video.pause();
  playPauseBtn.onclick = togglePlay;
  playPauseCtrl.onclick = togglePlay;

  video.addEventListener('play', ()=>{
    overlay.classList.add('hide');
    playPauseBtn.innerHTML = '<i class="fa-solid fa-pause"></i>';
    playPauseCtrl.innerHTML = '<i class="fa-solid fa-pause"></i>';
  });
  video.addEventListener('pause', ()=>{
    overlay.classList.remove('hide');
    playPauseBtn.innerHTML = '<i class="fa-solid fa-play"></i>';
    playPauseCtrl.innerHTML = '<i class="fa-solid fa-play"></i>';
  });

  muteBtn.addEventListener('click', ()=>{
    video.muted = !video.muted;
    muteBtn.innerHTML = video.muted 
      ? '<i class="fa-solid fa-volume-xmark"></i>'
      : '<i class="fa-solid fa-volume-high"></i>';
  });
  volumeSlider.addEventListener('input', e=>{
    video.volume = e.target.value;
  });

  video.addEventListener('timeupdate', ()=>{
    const p = (video.currentTime / video.duration) * 100;
    progress.style.width = p + '%';
  });
  progressBar.addEventListener('click', e=>{
    const rect = progressBar.getBoundingClientRect();
    const pos = (e.clientX - rect.left) / rect.width;
    video.currentTime = pos * video.duration;
  });

  fullscreenBtn.addEventListener('click', ()=>{
    if (video.requestFullscreen) {
      video.requestFullscreen();
    } else if (video.webkitEnterFullscreen) { // iOS Safari fix
      video.webkitEnterFullscreen();
    } else if (video.msRequestFullscreen) {
      video.msRequestFullscreen();
    }
  });

  let timer;
  document.addEventListener('mousemove', ()=>{
    controls.classList.remove('hidden');
    clearTimeout(timer);
    timer = setTimeout(()=> controls.classList.add('hidden'), 2500);
  });

  fetch('/api/videos/view/<%= video.id %>', { method:'POST' })
    .then(()=> {
      const el = document.getElementById('views');
      el.textContent = (parseInt(el.textContent||'0') + 1);
    });
})();
</script>

<style>
.watch-wrap {
  display:flex;justify-content:center;
  padding:30px 10px; background:var(--bg);
}
.video-wrapper {
  width:100%; max-width:950px; display:flex;flex-direction:column; gap:16px;
}
.video-inner {
  position:relative; aspect-ratio:16/9; background:#000; overflow:hidden; border-radius:14px;
  box-shadow:0 10px 30px rgba(0,0,0,.6);
}
.video-inner video {
  width:100%; height:100%; object-fit:contain; background:#000;
}
.overlay {
  position:absolute; inset:0; display:flex; align-items:center; justify-content:center;
  transition:opacity .3s ease; background:rgba(0,0,0,.25);
}
.overlay.hide { opacity:0; pointer-events:none; }

.play-btn {
  width:90px; height:90px; border-radius:50%; border:none; cursor:pointer;
  background:rgba(255,255,255,.2); color:#fff; backdrop-filter:blur(6px);
  font-size:28px; display:flex; align-items:center; justify-content:center;
  transition:transform .25s ease, background .3s;
}
.play-btn:hover { transform:scale(1.1); background:rgba(255,255,255,.35); }

/* Watermark */
.wm {
  position:absolute; bottom:10px; right:14px;
  color:rgba(255,255,255,.7);
  font-weight:600; font-size:13px;
  text-shadow:0 0 8px rgba(0,0,0,.5);
  user-select:none;
}

.controls {
  position:absolute; bottom:0; left:0; right:0;
  padding:12px; background:linear-gradient(180deg, transparent, rgba(0,0,0,.9));
  transition:opacity .3s ease;
}
.controls.hidden { opacity:0; pointer-events:none; }

.progress-bar {
  height:5px; background:rgba(255,255,255,.15); border-radius:3px;
  overflow:hidden; margin-bottom:10px; cursor:pointer;
}
#progress {
  height:100%; width:0%; background:linear-gradient(90deg,var(--accent),var(--primary));
}
.buttons { display:flex; gap:10px; align-items:center; }
.ctrl-btn {
  background:rgba(255,255,255,.12); border:none; border-radius:8px;
  padding:8px; color:#fff; cursor:pointer; transition:background .2s;
}
.ctrl-btn:hover { background:rgba(255,255,255,.25); }
input[type=range] {
  accent-color:var(--accent);
  width:100px; cursor:pointer;
}
.meta {
  padding:10px 4px;
}
.meta .title {
  font-size:clamp(22px,2.5vw,26px);
}
.meta .stats {
  display:flex; gap:8px; align-items:center;
  color:var(--muted); font-size:14px;
  margin:6px 0 8px;
}
.meta .desc {
  color:var(--muted); font-size:15px; line-height:1.5;
}
</style>
