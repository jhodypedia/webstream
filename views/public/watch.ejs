<section class="watch-page">
  <div class="player-container">
    <div class="video-box">
      <video id="player" preload="metadata" playsinline></video>

      <!-- Overlay (Play Button) -->
      <div class="overlay" id="overlay">
        <button id="playPauseBtn" class="play-btn">
          <i class="fa-solid fa-play"></i>
        </button>
      </div>

      <!-- Custom Controls -->
      <div class="controls" id="controls">
        <div class="progress-bar" id="progressBar">
          <div id="progress"></div>
        </div>
        <div class="buttons">
          <button id="playPauseCtrl" class="ctrl-btn">
            <i class="fa-solid fa-play"></i>
          </button>
          <button id="muteBtn" class="ctrl-btn">
            <i class="fa-solid fa-volume-high"></i>
          </button>
          <input id="volume" type="range" min="0" max="1" step="0.05" value="1">
          <button id="fullscreenBtn" class="ctrl-btn">
            <i class="fa-solid fa-expand"></i>
          </button>
        </div>
      </div>
    </div>

    <!-- Meta Info -->
    <div class="video-meta">
      <h1><%= video.title %></h1>
      <div class="meta-stats">
        <i class="fa-solid fa-eye"></i>
        <span id="views"><%= video.views %></span> views
        <span>â€¢</span>
        <span><%= new Date(video.createdAt).toLocaleDateString('id-ID') %></span>
      </div>
      <% if (video.description) { %>
        <p class="description"><%= video.description %></p>
      <% } %>
    </div>
  </div>
</section>

<script src="https://cdn.jsdelivr.net/npm/hls.js@latest"></script>
<script src="https://kit.fontawesome.com/a2d9b09d5b.js" crossorigin="anonymous"></script>
<script>
(function(){
  const video = document.getElementById('player');
  const overlay = document.getElementById('overlay');
  const playPauseBtn = document.getElementById('playPauseBtn');
  const playPauseCtrl = document.getElementById('playPauseCtrl');
  const volumeSlider = document.getElementById('volume');
  const muteBtn = document.getElementById('muteBtn');
  const fullscreenBtn = document.getElementById('fullscreenBtn');
  const progress = document.getElementById('progress');
  const progressBar = document.getElementById('progressBar');
  const controls = document.getElementById('controls');
  const src = '<%= video.hls_master_url %>';

  // Setup HLS
  if (Hls.isSupported()) {
    const hls = new Hls();
    hls.loadSource(src);
    hls.attachMedia(video);
  } else if (video.canPlayType('application/vnd.apple.mpegurl')) {
    video.src = src;
  }

  // Play / Pause
  const togglePlay = () => video.paused ? video.play() : video.pause();
  playPauseBtn.onclick = togglePlay;
  playPauseCtrl.onclick = togglePlay;

  video.addEventListener('play', ()=>{
    overlay.style.opacity = 0;
    playPauseBtn.innerHTML = '<i class="fa-solid fa-pause"></i>';
    playPauseCtrl.innerHTML = '<i class="fa-solid fa-pause"></i>';
  });
  video.addEventListener('pause', ()=>{
    overlay.style.opacity = 1;
    playPauseBtn.innerHTML = '<i class="fa-solid fa-play"></i>';
    playPauseCtrl.innerHTML = '<i class="fa-solid fa-play"></i>';
  });

  // Volume
  muteBtn.addEventListener('click', ()=>{
    video.muted = !video.muted;
    muteBtn.innerHTML = video.muted 
      ? '<i class="fa-solid fa-volume-xmark"></i>'
      : '<i class="fa-solid fa-volume-high"></i>';
  });
  volumeSlider.addEventListener('input', e=>{
    video.volume = e.target.value;
  });

  // Progress
  video.addEventListener('timeupdate', ()=>{
    const p = (video.currentTime / video.duration) * 100;
    progress.style.width = p + '%';
  });
  progressBar.addEventListener('click', e=>{
    const rect = progressBar.getBoundingClientRect();
    const pos = (e.clientX - rect.left) / rect.width;
    video.currentTime = pos * video.duration;
  });

  // Fullscreen manual only
  fullscreenBtn.addEventListener('click', ()=>{
    if (!document.fullscreenElement) {
      video.parentElement.requestFullscreen();
    } else {
      document.exitFullscreen();
    }
  });

  // Hide controls when idle
  let timer;
  document.addEventListener('mousemove', ()=>{
    controls.classList.remove('hidden');
    clearTimeout(timer);
    timer = setTimeout(()=> controls.classList.add('hidden'), 2500);
  });

  // Increment view count
  fetch('/api/videos/view/<%= video.id %>', { method:'POST' })
    .then(()=> {
      const el = document.getElementById('views');
      el.textContent = (parseInt(el.textContent||'0') + 1);
    });
})();
</script>
